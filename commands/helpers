#!/bin/zsh

# import helpers
source `dirname $0`/../shell/functions

DOTFILES=~/.dotfiles
DOTFILES_SHELL=$DOTFILES/shell
DOTFILES_CONFIGS=$DOTFILES/configs
DOTFILES_PACKAGES=$DOTFILES/pkgs

# Directory / File specific
BREW_BUNDLE_FILE=$DOTFILES_PACKAGES/Brewfile
NPM_PACKAGES=$DOTFILES_PACKAGES/npm

# Logging
WARN='\033[0;31m'
FG='\033[1;34m'
NC='\033[0m'

# Logging functions
function ewrn { echo "${FG}[${WARN}!${FG}] ${1}${NC}"; }
function eerr { echo "${FG}[${WARN}x${FG}] ${1}${NC}"; }
function einf { echo "${FG}[i] ${1}${NC}"; }
function eask { printf "${FG}[?] ${1} (y/n)${NC} "; }
function link { ln -sF "$1" "$2"; }

# Ask then take action function
function askdo {
  eask "$2"
  read -r choice
  case "$choice" in y|Y|yes|YES ) $1; return;; esac
}

# Ask sudo once
function sudokeepalive {
	# Ask for mac password
	sudo -v
	# Keep-alive
	while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

function create_dir_if_not_exists {
  if [ ! -d "$1" ]; then
    mkdir -p "$1"
  fi
}

function backup_file {
  if [ -f "$1" ]; then
    mv "$1" "$1.bak"
    eif "File $1 backed up to $1.bak"
  else
    eerr "File $1 does not exist"
  fi
}

function backup_and_link_file {
  backup_file "$2"
  if [ $? -eq 0 ]; then
      link "$1" "$2"
  fi
}

function is_m1_mac {
  if [[ "$(arch)" == 'arm64' ]]; then
    return 0
  else 
    return 1
  fi
}

function reload_shell {
  einf "Reloading shell profile... "
  source "$HOME/.zshrc"
}
